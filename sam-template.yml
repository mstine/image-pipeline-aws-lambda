AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Resources:
  StineLambdaImages:
    Type: AWS::S3::Bucket
  StineLambdaThumbnails:
    Type: AWS::S3::Bucket
  ImageDb:
    Type: 'AWS::Serverless::SimpleTable'
    Properties:
      PrimaryKey:
        Name: Id
        Type: String
  ImagePipelineTrigger:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ./image-pipeline-trigger
      Policies:
        - AWSStepFunctionsFullAccess
        - CloudWatchLogsFullAccess
      Timeout: 30
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref ImagePipelineStateMachine
      Events:
        NewImage:
          Type: S3
          Properties:
            Bucket: !Ref StineLambdaImages
            Events: s3:ObjectCreated:*
  ImageAnalysis:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ./image-analysis
      Policies:
        - AmazonRekognitionFullAccess
        - CloudWatchLogsFullAccess
      Timeout: 30
  ImageResize:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ./image-resize
      Policies:
        - AmazonS3FullAccess
        - CloudWatchLogsFullAccess
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          THUMBNAIL_BUCKET: !Ref StineLambdaThumbnails
  ImageDbUpdate:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ./image-db-update
      Policies:
        - AmazonDynamoDBFullAccess
        - CloudWatchLogsFullAccess
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref ImageDb
  ImageApi:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ./image-api
      Policies:
        - AmazonDynamoDBReadOnlyAccess
        - CloudWatchLogsFullAccess
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref ImageDb
      Events:
        ListAll:
          Type: Api
          Properties:
            Path: /images
            Method: get
        GetImage:
          Type: Api
          Properties:
            Path: /images/{id}
            Method: get

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  ImagePipelineStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "An example of the Amazon States Language using a parallel state to execute two branches at the same time.",
              "StartAt": "Parallel",
              "States": {
                "Parallel": {
                  "Type": "Parallel",
                  "Next": "DB Update",
                  "Branches": [
                    {
                      "StartAt": "Resize",
                      "States": {
                        "Resize": {
                          "Type": "Task",
                          "Resource": "${imageResizeArn}",
                          "End": true
                        }
                      }
                    },
                    {
                      "StartAt": "Analyze",
                      "States": {
                        "Analyze": {
                          "Type": "Task",
                          "Resource": "${imageAnalyzeArn}",
                          "End": true
                        }
                      }
                    }
                  ]
                },
                "DB Update": {
                  "Type": "Task",
                  "Resource": "${dbUpdateArn}",
                  "Next": "Final State"
                },
                "Final State": {
                  "Type": "Pass",
                  "End": true
                }
              }
            }
          - {imageResizeArn: !GetAtt [ ImageResize, Arn ], imageAnalyzeArn: !GetAtt [ ImageAnalysis, Arn ], dbUpdateArn: !GetAtt [ ImageDbUpdate, Arn ]}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]
